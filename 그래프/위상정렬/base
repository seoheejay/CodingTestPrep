#방향 그래프의 모든 노드를 방향성에 거스르지 않도록 순서대로 나열하는 것
#시간 복잡도 O(V+E) > 위상정렬 수행할 때는 차례대로 모든 노드를 확인하면서, 해당 노드에서 출발하는 간선을 차례대로 제거해야 한다 > 결과적으로 노드와 간선 모두 확인하기에

from collections import deque

v,e = map(int, input().split())
#모든 노드에 대한 진입차수는 0으로 초기화
indegree = [0]*(v+1)
graph = [[]for i in range(v+1)]

#방향 그래프의 모든 간선 정보를 입력받기
for _ in range(e):
  a,b = map(int, input().split())
  graph[a].append(b) #정점 A에서 B로 이동 가능
  #진입차수를 1 증가
  indegree[b] +=1

#위상 정렬 함수
def topology_sort():
  result = []  #알고리즘 수행 결과를 담을 리스트
  q = deque() #큐 기능을 위한 deque 라이브러리 사용

  #처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입
  for i in range(1,v+1):
    if indegree[i] == 0:
      q.append(i)

  #큐가 빌 때까지 반복
  while q:
    now = q.popleft()
    result.append(now)
    #해당 원소와 연결된 노드들의 진입차수에서 1빼기
    for i in graph[now]:
      indegree[i]-=1
      #새롭게 진입차수가 0이 되는 노드를 큐에 삽입
      if indegree[i]==0:
        q.append(i)

  #위상 정렬을 수행한 결과 출력
  for i in result:
    print(i,end='')

topology_sort()
