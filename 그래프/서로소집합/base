#특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
  #루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
  if parent[x] != x:
    return find_parent(parent,parent[x])
  return x

#두 원소가 속한 집합을 합치기
def union_parent(parent,a,b):
  a = find_parent(parent,a)
  b = find_parent(parent,b)
  if a < b :
    parent[b] = a
  else:
    parent[a] = b

#노드의 개수와 간선의 개수 입력받기 
v, e = map(int, input().split())
parent = [0]*(v+1)

#부모 테이블상에서 부모를 자기 자신으로 초기화
for i in range(1,v+1):
  parent[i] = i

#union 연산 수행
for i in range(e):
  a,b = map(int, input().split())
  union_parent(parent,a,b)

#각 원소가 속한 집합 출력
print('각 원소가 속한 집합: ',end='')
for i in range(1,v+1):
  print(fine_parent(parent,i),end='')

print()

#부모 테이블 내용 출력
print('부모 테이블: ',end='')
for i in range(1,v+1):
  print(parent[i],end='')

###################################
다만 이렇게 구현하면 find함수가 비효율적으로 동작한다. 최악의 경우 find함수가 모든 노드를 다 확인하는 터라 시간 복잡도가 O(V)가 된다.
결과적으로 현재의 알고리즘을 그대로 이용하게 되면 노드의 개수가 V개이고, find혹은 union 연산의 개수가 M개일 때 전체 시간 복잡도는 O(VM)이 되어 비효율적이다.
S > 경로 압축 기법 적용하면 시간 복잡도 개선 가능 
경로 압축 기법 : find함수를 재귀적으로 호출한 뒤에 부모 테이블 값을 갱신하는 기법
################################### 개선된 코드
def find_parent(parent,x):
  if parent[x] != x :
    parent[x] = find_parent(parent, parent[x])
  return parent[x]
