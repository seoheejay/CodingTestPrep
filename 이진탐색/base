#탐색 범위를 반으로 좁혀가며 빠르게 탐색하는 알고리즘 > 단, 정렬되어있어야한다
#O(logN), 변수3개 사용(시작점,끝점,중간점)
#구현방법: 재귀함수 이용, 반복문 이용

####재귀함수####
def binary_search(array, target, start, end):
  if start>end:
    return None
  mid = (start+end)//2
  if array[mid] == target:
    return mid
  elif array[mid] > target :
    return binary_search(array,target,start,mid-1)
  else:
    return binary_search(array,target,mid+1,end)


#n과 target입력받기
n, target = list(map(int,input().split()))
#전체 원소 입력받기
array = list(map(int, input().split()))

#수행
result = binary_search(array,target,0,n-1)
if result == None :
  print("원소가 존재하지 않습니다.")
else:
  print(result + 1)


#####반복문#####
def binary_search(array, target, start, end):
  while start <= end :
    mid = (start+end)//2
    if array[mid]==target:
      return mid
    #중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인
    elif array[mid]>target:
      end = mid-1
    #중간점의 값보다 찾고자 하는 값이 클 경우 오른쪽 확인
    else:
      start = mid + 1

  return Nome


#n과 target입력받기
n, target = list(map(int,input().split()))
#전체 원소 입력받기
array = list(map(int, input().split()))

#수행
result = binary_search(array,target,0,n-1)
if result == None :
  print("원소가 존재하지 않습니다.")
else:
  print(result + 1)

