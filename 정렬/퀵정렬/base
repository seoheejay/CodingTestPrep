# 피벗(기준)설정한 다음 큰수, 작은수 교환 후 리스트 반으로 나누는
# 재귀함수 사용 > 종료조건? > data 1개 일 때 = 이미 정렬되었다는 뜻이니깐
# 시간 복잡도 O(NlogN), 최악의 경우 O(N^2) >> 이미 정렬된 경우 매우 느리게 동작한다(삽입정렬과 반대)

##############전통###############
array = [5,7,9,0,3,1,6,2,4,8]

def quick_sort(array,start,end):
  if start >= end : #원소가 1개인 경우 종료
    return
  pivot = start #피벗은 첫 번째 요소
  left  = start + 1
  right = end
  while left <= right:
    #피벗보다 큰 데이터 찾을 때까지 반복
    while left<=end and array[left] <= array[pivot]:
      left += 1
    #작은 데이터 찾을 때까지
    while right > start and array[right] >= array[pivot]:
      right -= 1

    if left > right:  #엇갈렸다면 작은 데이터와 피벗 교체
      array[right],array[pivot] = array[pivot],array[right]
    else: #엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
      array[left],array[right] = array[right],array[left]

  #분할 이후에 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
  quick_sort(array, start, right-1)
  quick_sort(array, right+1, end)

quick_sort(array,0, len(array)-1)
print(array)
  


##############파이썬 장점 살린###############
#전통보다 연산횟수 증가 > 시간면에서는 비효율적
#but 더 직관적, 기억 쉬움
array = [5,7,9,0,3,1,6,2,4,8]

def quick_sort(array):
  #리스트가 하나 이하의 원소만을 담고 있다면 종료
  if len(array) <= 1:
    return array

  pivot = array[0]
  tail = array[1:] #피벗 제외 리스트

  left_side = [x for x in tail if x <= pivot]
  right_side = [x for x in tail if x > pivot]

  #분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트 반환
  return quick_sort(left_side)+[pivot]+ quick_sort(right_side)

print(quick_sort(array))
