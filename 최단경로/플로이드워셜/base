#모든 지점에서 모든 지점까지 최단 경로 "모두"구해야할 경우 > O(N^3)
#2차원 리스트 
#다이나믹 프로그래밍

INF = int(1e9)

#노드 개수, 간선 개수 입력받기
n = int(input())
m = int(input())
#2차원 리스트만들고 초기화
graph = [[INF]*(n+1)for _ in range(n+1)]
#자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1,n+1):
  for b in range(1, n+1):
    if a==b:
      graph[a][b]=0
#각 간선에 대한 정보 입력받아 그 값으로 초기화
for _ in range(m):
  #a에서b로 가는 비용은 c라고 설정
  a,b,c = map(int, input().split())
  graph[a][b]=c

#점화식에 따라 플로이드 워셜 알고리즘 수행
for k in range(1,n+1):
  for a in range(1,n+1):
    for b in range(1,n+1):
      graph[a][b]=min(graph[a][b],graph[a][k]+graph[k][b])

#수행된 결과 출력
for a in range(1,n+1):
  for b in range(1,n+1):
    if graph[a][b]==INF:
      print("infinity", end="")
    else:
      print(graph[a][b], end="")
  print()
